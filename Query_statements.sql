
#Creating a view by joining tables USER, TEST, LAB, ADDRESS, APP_USER and on that we are displaying the userâ€™s test data like which test user took from which lab and the result of that test.

CREATE VIEW CONTACT_TRACER.USERDATA AS(SELECT USER.USER_ID AS UserID,APP_USER.FIRST_NAME as UserName,LAB.LAB_NAME AS LabName, TEST.TEST_TYPE AS TestType , TEST.TEST_DATE as TestDate, ADDRESS.STATE as State,
CASE WHEN TEST.RESULT = False THEN 'Negative'
ELSE 'Positive'
END AS TestResult
FROM CONTACT_TRACER.USER , CONTACT_TRACER.TEST , CONTACT_TRACER.LAB,CONTACT_TRACER.ADDRESS,CONTACT_TRACER.APP_USER
WHERE LAB.LAB_ID= TEST.LAB_ID AND
TEST.USER_ID = USER.USER_ID AND 
USER.ZIPCODE=ADDRESS.ZIPCODE AND 
USER.USER_ID=APP_USER.APP_USER_ID

ORDER BY UserID)

#Created a view to trace users who are in contact with infected users. So that, the health track admin can notify these users. 

CREATE OR REPLACE VIEW CONTACT_TRACER.TRACING_VIEW AS
SELECT A.FIRST_NAME, A.LAST_NAME, A.PHONE, U.LIVING_STATUS
FROM CONTACT_TRACER.USER AS U
INNER JOIN  CONTACT_TRACER.TRACKER AS T
ON U.USER_ID = T.USER_ID
INNER JOIN CONTACT_TRACER.GPS_LOCATION AS G
ON T.GPS_LOC = G.GPS_LOC
INNER JOIN CONTACT_TRACER.APP_USER AS A
ON A.APP_USER_ID = U.USER_ID
WHERE U.INFECTION_STATUS != 'infected'
AND T.GPS_LOC IN (
   SELECT T1.GPS_LOC
   FROM CONTACT_TRACER.USER AS U1, CONTACT_TRACER.TRACKER AS T1
   WHERE U1.USER_ID = T1.USER_ID
   AND U1.INFECTION_STATUS = 'infected'
   )

#Created a view to get information about infected users travel history. This view is for health track admin.
CREATE OR REPLACE VIEW CONTACT_TRACER.TRAVELLED_INFECTED_USER_VIEW AS
SELECT A.FIRST_NAME, A.LAST_NAME, A.PHONE, T.COUNTRY AS Country_travelled_to
FROM `mohini-data225-spring2021.CONTACT_TRACER.USER` AS U
INNER JOIN `mohini-data225-spring2021.CONTACT_TRACER.TRAVEL_HISTORY` AS T
ON U.USER_ID = T.USER_ID
INNER JOIN CONTACT_TRACER.APP_USER AS A
ON A.APP_USER_ID = U.USER_ID
WHERE U.INFECTION_STATUS = 'infected'





# Number of infected cases for particular state

CREATE OR REPLACE PROCEDURE CONTACT_TRACER.GetCovidCases (
IN STATE_IN STRING, OUT COUNT INT64
)

BEGIN 
SET COUNT = (SELECT COUNT(U.USER_ID)
FROM CONTACT_TRACER.USER AS U
INNER JOIN CONTACT_TRACER.ADDRESS AS A
ON U.ZIPCODE = A.ZIPCODE  
WHERE U.INFECTION_STATUS = 'infected' AND
A.STATE = STATE_IN
);
END;

DECLARE COUNT INT64;

DECLARE STATE_NAME STRING DEFAULT 'Michigan';
CALL CONTACT_TRACER.GetCovidCases(STATE_NAME, COUNT);
SELECT STATE_NAME, COUNT

#Using SELECT CASE/WHEN, based on infection status and immunity compromised of users, sending an alert message to them.

SELECT USER_ID, INFECTION_STATUS, IMMUNITY_COMPROMISED,
CASE WHEN INFECTION_STATUS = 'suspected' AND IMMUNITY_COMPROMISED = TRUE 
THEN 'This user is at high risk'
WHEN INFECTION_STATUS = 'suspected' AND IMMUNITY_COMPROMISED = FALSE 
THEN 'This user is at moderate risk'
WHEN INFECTION_STATUS = 'infected' 
THEN 'This user is Covid-19 positive'
WHEN INFECTION_STATUS = 'not-infected' AND IMMUNITY_COMPROMISED = TRUE 
THEN 'This user is at low risk'
ELSE 'This User is safe'
END AS Alert
FROM CONTACT_TRACER.USER

#List of labs that provide more than one immunity test.

SELECT Count(T.TEST_ID) AS Test_Count, L.LAB_NAME AS Lab_Name
FROM CONTACT_TRACER.LAB AS L, CONTACT_TRACER.TEST AS T
WHERE T.LAB_ID = L.LAB_ID
GROUP BY L.LAB_ID, L.LAB_NAME
HAVING COUNT(T.TEST_ID) > 1

#Identify the GPS coordinates of the infected person.
SELECT U.USER_ID, G.GPS_LAT, G.GPS_LONG
FROM `mohini-data225-spring2021.CONTACT_TRACER.GPS_LOCATION` AS G
INNER JOIN `mohini-data225-spring2021.CONTACT_TRACER.TRACKER` AS T
ON G.GPS_LOC = T.GPS_LOC
INNER JOIN `mohini-data225-spring2021.CONTACT_TRACER.USER` AS U
ON T.USER_ID = U.USER_ID
WHERE U.INFECTION_STATUS = "infected"

#List of countries,where an infected person travelled. 

SELECT U.USER_ID, T.COUNTRY AS Country_travelled_to
FROM `mohini-data225-spring2021.CONTACT_TRACER.USER` AS U
INNER JOIN `mohini-data225-spring2021.CONTACT_TRACER.TRAVEL_HISTORY` AS T
ON U.USER_ID = T.USER_ID
WHERE U.INFECTION_STATUS = 'infected'
GROUP BY U.USER_ID, T.COUNTRY

#Find non-infected users and their living situation who have come in contact with an infected person (CONTACT TRACING) based on GPS location. 

SELECT U.USER_ID, U.LIVING_STATUS
FROM CONTACT_TRACER.USER AS U, CONTACT_TRACER.TRACKER AS T, CONTACT_TRACER.GPS_LOCATION AS G
WHERE U.USER_ID = T.USER_ID AND T.GPS_LOC = G.GPS_LOC
AND U.INFECTION_STATUS != 'infected' AND T.GPS_LOC IN (SELECT T1.GPS_LOC
FROM CONTACT_TRACER.USER AS U1, CONTACT_TRACER.TRACKER AS T1
WHERE U1.USER_ID = T1.USER_ID
AND U1.INFECTION_STATUS = 'infected');

#Number of infected cases per city.

SELECT COUNT(U.USER_ID) AS infected_case_count, A.CITY
FROM CONTACT_TRACER.USER AS U
INNER JOIN CONTACT_TRACER.ADDRESS AS A
ON U.ZIPCODE = A.ZIPCODE
WHERE U.INFECTION_STATUS = 'infected'
GROUP BY A.CITY
